name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Run typecheck
        run: npx -y tsc --noEmit
      - name: Run tests
        run: npm test --silent
      - name: Build
        run: npm run build

  # Optional: deploy to staging S3 if env vars are provided
  deploy-staging:
    if: github.ref == 'refs/heads/main' && env.AWS_S3_BUCKET
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Sync to S3
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          npm run build
          aws s3 sync dist/ s3://${{ env.AWS_S3_BUCKET }} --delete

  terraform:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Configure AWS credentials (OIDC or secrets)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1

      - name: Terraform Init
        working-directory: terraform/envs/staging
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: terraform/envs/staging
        run: terraform plan -input=false -out=tfplan

      - name: Terraform Apply (manual)
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
        working-directory: terraform/envs/staging
        env:
          TF_VAR_bucket_name: ${{ secrets.STAGING_BUCKET_NAME }}
        run: terraform apply -input=false tfplan

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Configure AWS credentials (secrets)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get terraform output
        id: tfout
        working-directory: terraform/envs/staging
        run: |
          terraform init -input=false
          echo "BUCKET=$(terraform output -raw site_bucket)" >> $GITHUB_OUTPUT

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Sync to S3
        run: aws s3 sync dist/ s3://${{ steps.tfout.outputs.BUCKET }} --delete
