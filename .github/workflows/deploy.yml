name: Deploy Static Site

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'vite.config.ts'
      - 'terraform/**'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}

jobs:
  # Note: PR planning is handled by .github/workflows/terraform-plan.yml (PR-only workflow)

  build-deploy:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: terraform
        id: tfapply
        run: |
          set -o pipefail
          terraform apply -input=false -auto-approve 2>&1 | tee tfapply.log
          exit_code=${PIPESTATUS[0]}
          if [ "$exit_code" -eq 0 ]; then
            echo "apply_status=success" >> $GITHUB_OUTPUT
          else
            echo "apply_status=failure" >> $GITHUB_OUTPUT
          fi
          echo "tf_summary<<EOF" >> $GITHUB_OUTPUT
          tail -n 200 tfapply.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get outputs
        id: tfout
        working-directory: terraform
        run: |
          # adapt to available outputs in terraform/envs/*; using common names from this repo
          if terraform output -raw site_bucket >/dev/null 2>&1; then echo "site_bucket=$(terraform output -raw site_bucket)" >> $GITHUB_OUTPUT; fi
          if terraform output -raw distribution_id >/dev/null 2>&1; then echo "distribution_id=$(terraform output -raw distribution_id)" >> $GITHUB_OUTPUT; fi
          if terraform output -raw site_website_endpoint >/dev/null 2>&1; then echo "site_website_endpoint=$(terraform output -raw site_website_endpoint)" >> $GITHUB_OUTPUT; fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Lint & Type Check
        run: |
          # repo may not have lint configured; keep lint optional
          npm run lint || true
          npx tsc --noEmit

      - name: Build site (Vite)
        env:
          VITE_SITE_ENDPOINT: ${{ steps.tfout.outputs.site_website_endpoint }}
        run: npm run build

      - name: Archive build
        uses: actions/upload-artifact@v4
        with:
          name: site-dist
          path: dist

      - name: Export endpoint for build
        if: steps.tfout.outputs.site_website_endpoint
        run: |
          echo "Site endpoint: ${{ steps.tfout.outputs.site_website_endpoint }}" >> $GITHUB_STEP_SUMMARY

      - name: Sync to S3
        if: steps.tfout.outputs.site_bucket
        run: aws s3 sync dist s3://${{ steps.tfout.outputs.site_bucket }}/ --delete

      - name: Invalidate CloudFront
        if: steps.tfout.outputs.distribution_id
        run: aws cloudfront create-invalidation --distribution-id ${{ steps.tfout.outputs.distribution_id }} --paths '/*'

      - name: Summary
        run: |
          echo "Deployment complete. Bucket: ${{ steps.tfout.outputs.site_bucket }}" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR(s) with Apply result (push to main)
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.sha;
            const res = await github.rest.repos.listPullRequestsAssociatedWithCommit({ owner, repo, commit_sha: sha });
            const prs = res.data.map(p => p.number);
            if (prs.length === 0) {
              console.log('No PRs associated with this deploy commit.');
              return;
            }
            const status = '${{ steps.tfapply.outputs.apply_status }}';
            const summary = `\n\`\`\`\n${{ steps.tfapply.outputs.tf_summary }}\n\`\`\``;
            const body = `## Terraform Apply Result\n\n- Status: **${status}**\n\n### Output summary\n${summary}`;
            for (const pr of prs) {
              await github.rest.issues.createComment({ owner, repo, issue_number: pr, body });
            }
